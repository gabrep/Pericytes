---
title: "GSE62505"
author: "Gabriel"
date: "`r Sys.Date()`"
output: 
  html_document:
    toc: TRUE
---

# Pacotes
```{r message=FALSE, warning=FALSE, include=FALSE}
library(AnnotationDbi)
library(dendextend)
library(EnhancedVolcano)
library(FactoMineR); library(factoextra)
library(hgu133a.db)
library(GEOquery)
library(limma)
library(oligo)
library(pheatmap)
library(sva)
library(tidyverse)

### Pacotes
library(reshape2)
library(clusterProfiler)
library(dendextend)
library(DESeq2)
library(enrichplot)
library(fgsea)
library(GOplot)
library(ggpubr)
library(msigdbr)
library(openxlsx)
library(org.Hs.eg.db)
library(pheatmap)
library(UpSetR)
library(rstatix)
library(tidyverse)
```


**Primeira etapa**: Carregar o dataset GSE62505, normalizacao, QC e DEG
**Segunda etapa**: Enriquecimento
<br>
# Primeira etapa

## Leitura do dataset
#### GSE62505
<br>
ABPMC-hip, adult Brain Perivascular Mesodermal Cell - Hippocampus, 3 replicates
ABPMC-wm, adult Brain Perivascular Mesodermal Cell - White Matter, 3 replicates
MSC, Mesenchymal Stem Cell, 3 replicates
<br>
```{r message=FALSE, warning=FALSE, include=FALSE}
#Carregar metadados
gse62505 <- getGEO("GSE62505") #Este metodo ja traz as leituras de expressao normalizadas
gse62 <- gse62505[[1]]

#Download dos dados suplementares, arquivos .cel
filePaths <- getGEOSuppFiles("GSE62505")

celdata <- read.celfiles(list.celfiles("GSE62505",
                                       full.names=TRUE,
                                       listGzipped = TRUE))

pd <- pData(gse62)
pd['cel_file'] <- str_split(pd$supplementary_file,"/") %>% map_chr(tail,1) #Criar nova coluna (cel_file) contendo o nome do arquivo de cada leitura. Importante para manter a ordem das leituras ao importar os dados de leitura

#Importar com a ordem correta, garantindo que as leituras estao mapeadas para as amostras certas
gse62_celdata <-  read.celfiles(paste0('GSE62505/',pd$cel_file),phenoData=phenoData(gse62))

```

```{r message=FALSE, warning=FALSE, include=FALSE}
#Manter apenas amostras de interesse: ABPMC e MSCs
pd <- pd[9:17,] #selecionar pelo pData
gse62_celdata <- gse62_celdata[,rownames(pd)] #filtro ao objeto inteiro aplica a todas as bifurcacoes

exp_gse62 <- exprs(gse62_celdata)
exp_gse62.foradeordem <- exprs(celdata) #Realmente estava fora de ordem

oligo::boxplot(log2(exp_gse62), target="core")

eset_gse62 <- oligo::rma(gse62_celdata)
oligo::boxplot(eset_gse62, target="core")

oligo::hist(gse62_celdata)
oligo::hist(eset_gse62)

```

## SEM FILTRO PCA e dendograma (nao filtrados)
```{r}
oligo::hist(gse62_celdata)
oligo::hist(eset_gse62)

exp_eset_gse62 <- exprs(eset_gse62)
pca_gse62 <- PCA(t(exp_eset_gse62))

fviz_pca_ind(pca_gse62,
             geom.ind="point", pointshape=21, pointsize=4,
             mean.point=F,
             fill.ind=pd$`cell type:ch1`,
             addEllipses = TRUE, ellipse.type="confidence",
             legend.title="Cell type", title="GSE62505")+
  theme_classic()+
  scale_fill_manual(values=c("blue", "yellow"))+
  scale_color_manual(values=c("blue", "yellow"))
```



# Filtro para baixas leituras
```{r}
gse62_medians <- rowMedians(exp_eset_gse62)

man_cutoff <- 3.5

hist(gse62_medians, 100, col = "cornsilk1", freq = FALSE,
     main = "Histogram of the median intensities",
     border = "antiquewhite4",
     xlab = "Median intensities")
abline(v=man_cutoff)

man_threshold <- apply(exp_eset_gse62, 1, function(x){
  sum(x > man_cutoff) >= 3})
table(man_threshold)

eset_gse62_filtered <- subset(eset_gse62, man_threshold)
```

##PCA e heatmap
```{r}

exp_eset_gse62_filtered <- exprs(eset_gse62_filtered)
pca_gse62 <- PCA(t(exp_eset_gse62_filtered), graph = F)

pdf("Figuras/PCA.pdf", width = 6, height = 4)
fviz_pca_ind(pca_gse62,
             geom.ind="point", pointshape=21, pointsize=4,
             mean.point=F,
             fill.ind=pd$`cell type:ch1`,
             addEllipses = TRUE, ellipse.type="confidence",
             legend.title="Cell type", title="GSE62505")+
  theme_classic()+
  scale_fill_manual(values=c("blue", "yellow"))+
  scale_color_manual(values=c("blue", "yellow"))
dev.off()
ggsave("Figuras/PCA.png", width = 6, height = 4)

ann <- dplyr::select(pd, `cell type:ch1`) %>% dplyr::rename(`Cell type`=1)

#heatmap <- 
pdf("Figuras/heatmap2.pdf", width = 4, height = 8)
  pheatmap(exp_eset_gse62_filtered,
         border_color = NA,
         #color=viridis::viridis(50, option = "plasma"),
         color=colorRampPalette(c("blue","black", "yellow"))(100),
         scale="row",
         show_rownames = F,
         show_colnames = F,
         #cluster_rows = F,
         treeheight_row = 0,
         annotation_col = ann,
         annotation_colors = list(`Cell type`= c(Mesenchymal = "blue", Perivascular = "yellow")))
dev.off()
  heatmap <- ggplotify::as.ggplot(heatmap)
heatmap
ggsave("Figuras/Heatmap normalizado.png", width = 5, height = 8)
```

##Dendograma e correlaÃ§ao
```{r}
cores <- c("yellow", "blue")
dist <- dist(t(exp_eset_gse62_filtered))
hc <- hclust(dist)
dend <- as.dendrogram(hc)

pdf("Figuras/Dendograma_discriminado.pdf", height = 4.5, width = 8)
dend %>% 
  color_labels(labels = colnames(exp_eset_gse62[,1:3]), col="darkred") %>%
  color_labels(labels = colnames(exp_eset_gse62[,4:6]), col="red") %>%
  color_labels(labels = colnames(exp_eset_gse62[,7:9]), col="blue") %>%
  plot()

  legend("topright",
       legend=c("Perivascular (Hip)", "Perivascular (WM)",  "Mesenchymal"),
       col=c("darkred", "red", "blue"),
       pch=c(20,20,20), bty = "n", pt.cex = 1.8, cex = .8, trace=T)
dev.off()
  ggsave("Figuras/Dendograma.png", width = 4, height = 4, bg="white")
  
dist.matrix <- as.matrix(dist)

pdf("Figuras/Heatmap_euclidiana.pdf", width = 5 ,height = 4)
pheatmap(dist.matrix,
         color=colorRampPalette(c("white", "blue"))(50),
         scale = "none",
         border_color = NA)
dev.off()

breaksList = seq(0.8,1, by = 0.02)
pdf("Figuras/Heatmap_cor_exp.pdf", width = 5, height = 4)
pheatmap(cor(exp_eset_gse62_filtered, method = "spearman"), 
         #color=colorRampPalette(c("white", "blue"))(50),
         #color = colorRampPalette(rev(RColorBrewer::brewer.pal(n = 11, name = "PRGn")))(length(breaksList)),
         color=viridis::turbo(40),
         breaks = breaksList,
         #scale = "none",
         border_color = NA)
dev.off()
```

#### Annotations
```{r}
fd_gse62 <- fData(gse62)
colnames(fd_gse62)
gse62_genes <- fd_gse62 %>% select(ID, `Gene Title`, `Gene Symbol`, ENTREZ_GENE_ID)

anno_gse62 <- AnnotationDbi::select(hgu133a.db, 
                                    keys = (featureNames(eset_gse62_filtered)),
                                    columns = c("SYMBOL", "GENENAME", "ENTREZID"),
                                    keytype = "PROBEID")
anno_gse62 <- subset(anno_gse62, !is.na(SYMBOL))

#Remover ProbeIDs que possuem mais de uma leitura
anno_grouped <- group_by(anno_gse62, PROBEID)
anno_summarized <-dplyr::summarize(anno_grouped, no_of_matches = n_distinct(SYMBOL))
anno_filtered <- filter(anno_summarized, no_of_matches > 1)
probe_stats <- anno_filtered
dim(probe_stats)

ids_to_exlude <- (featureNames(eset_gse62_filtered) %in% probe_stats$PROBEID)
table(ids_to_exlude)

gse62_final <- subset(eset_gse62_filtered, !ids_to_exlude)
fData(gse62_final)$PROBEID <- rownames(fData(gse62_final))

fData(gse62_final) <- left_join(fData(gse62_final), anno_gse62)

exp_gse62_final <- exprs(gse62_final)
fData(gse62_final)
```

## DEG
```{r}
design <- model.matrix(~ 0 + pd$`cell type:ch1`)
colnames(design) <- levels(as.factor(pd$`cell type:ch1`))
contrast_matrix <- makeContrasts(Perivascular - Mesenchymal, levels=design) #Mesenchymal como referencia
contrast_matrix

fit <- lmFit(gse62_final, design)
fit2 <- contrasts.fit(fit, contrasts = contrast_matrix)
fit2 <- eBayes(fit2)
fitted.ebayes <- eBayes(fit)
topTable(fit2)

summary(decideTests(fit2,lfc=2, adjust.method = "fdr", p.value = 0.05))
#Adicionar entrezid

res_gse62 <- topTable(fit2, number = Inf)
res_gse62_lfc <- topTable(fit2, number = Inf, p.value = 0.05, lfc=2)
write.xlsx(res_gse62_lfc, "Resultados DEG logFC 2.xlsx")
```

##Volcano plot
```{r}
pdf("Figuras/DEG_count.pdf", width = 3, height = 4)
data.frame(Res = c("Down", "up"), n = c(-205,258)) %>% 
  ggplot(aes(Res, n, fill=Res))+
  geom_col(width = .6, fill=c("blue", "yellow"))+
  theme_classic()+
  geom_hline(yintercept = 0)+
  labs(y="Transcript count", x="Regulation")+
  theme(axis.text = element_text(size=12, color="black"))+
  annotate(geom="text", x=c(1, 2), y=c(-50,50), label=c("205", "258"))
dev.off()  

keyvals <- ifelse(res_gse62$adj.P.Val >= 0.05, "gray",
                  ifelse(res_gse62$logFC <= -2, "blue",
                         ifelse(res_gse62$logFC >= 2, "yellow", "gray")))

keyvals[is.na(keyvals)] <- "gray"
names(keyvals)[keyvals == "yellow"] <- "Up-regulated"
names(keyvals)[keyvals == "gray"] <- "Not significant"
names(keyvals)[keyvals == "blue"] <- "Down-regulated"

pdf("Figuras/Volcano plot.pdf", width = 7, height = 6)
EnhancedVolcano(res_gse62,
                lab=res_gse62$SYMBOL,
                #selectLab = FC_survival_deceased$miRNA[which(FC_survival_deceased$miRNA %in% top_FC$miRNA)],
                #drawConnectors = TRUE,
                max.overlaps = Inf,
                x="logFC", 
                y="adj.P.Val",
                colCustom = keyvals,
                ylab = bquote(~-Log[10]~italic("Adj P-value")),
                FCcutoff = 2,
                pCutoff = 0.05,
                #pCutoffCol = "adj.P.Val",
                title=NULL,
                subtitle=NULL,
                pointSize = 3, 
                labSize = 4,
                colAlpha = .8,
                xlim=c(-8.5,8.5),
                ylim=c(0,7))+
  annotate("rect", xmin = -2, xmax = -Inf,
           ymin = 1.3, ymax = Inf,
           alpha = .1, fill = "blue") +
  annotate("rect", xmin = 2, xmax = Inf,
           ymin = 1.3, ymax = Inf,
           alpha = .1, fill = "yellow")

ggsave("Figuras/Volcano.png", width = 6, height = 6, bg="white")
dev.off()
```

## Enriquecimento


### GSEA
```{r}
H <- msigdbr(species = "Homo sapiens", category = "H")
H.symbol <- dplyr::select(H, gs_name, gene_symbol)

msigdbr_collections() %>% View()
C3 <- H <- msigdbr(species = "Homo sapiens", category = "C3", subcategory = "TFT:GTRD")
C3.symbol <- dplyr::select(C3, gs_name, gene_symbol)


res.order <- res_gse62[order(res_gse62$logFC, decreasing = TRUE),] %>% as.data.frame() %>% na.omit()

ranks <- res.order$logFC
names(ranks) <- res.order$SYMBOL

cp_gsea <- clusterProfiler::GSEA(ranks, TERM2GENE = H.symbol)
gsea_res <- cp_gsea@result
write.xlsx(gsea_res, "Resultados GSEA.xlsx")

cp_gsea_c3 <- clusterProfiler::GSEA(ranks, TERM2GENE = C3.symbol)
gsea_c3_res <- cp_gsea_c3@result
```

####Plots
```{r}
pdf("Figuras/Enriquecimento/Ridgeplot_GSEA.pdf", width = 8, height = 10)
ridgeplot(cp_gsea)+
  labs(title="Gene set enrichment analysis terms")+
  theme(axis.text.y = element_text(size = 10),
        axis.text.x = element_text(size = 10))+
  viridis::scale_fill_viridis(option="viridis", begin = .2, end = .8)
dev.off()
ggsave("Figuras/Enriquecimento/Ridgeplot_GSEA.png", width = 8, height = 10)

pdf("Figuras/Enriquecimento/Gseaplot_angiogensis.pdf", width = 6, height = 5)
gseaplot2(cp_gsea, geneSetID = "HALLMARK_ANGIOGENESIS")
dev.off()
ggsave("Figuras/Enriquecimento/Gseaplot_angiogensis.png", width = 6, height = 5)

## Heatmap hallmark angiogesis
hallmark.angio <- filter(gsea_res, ID == "HALLMARK_ANGIOGENESIS") %>% select(core_enrichment)
hallmark.angio <- hallmark.angio %>% mutate(core_enrichment = as.list(strsplit(core_enrichment, "/")))
angio.genes <- data.frame(Genes = hallmark.angio$core_enrichment) %>% dplyr::rename("Genes"=1)



anno_angio <- filter(anno_gse62, SYMBOL %in% angio.genes$Genes)
genes.angio <- exp_gse62_final %>% 
  as.data.frame() %>% 
  rownames_to_column(var = "anno") %>% 
  filter(anno %in% anno_angio$PROBEID) %>% 
  left_join(anno_angio, by=c("anno" = "PROBEID")) %>% 
  group_by(SYMBOL) %>% 
  get_summary_stats(type="mean") %>% 
  pivot_wider(., names_from = "variable", values_from = "mean") %>% 
  column_to_rownames(., var="SYMBOL")

pdf("Figuras/Enriquecimento/Heatmap_expr_angiogenesis.pdf", width = 6, height = 5)
pheatmap(genes.angio[,-1],
         border_color = NA,
         cluster_cols = F,
         cluster_rows = T,
         treeheight_row = 0,
         show_rownames = T,
         show_colnames = F,
         scale="row",
         color=viridis::viridis(200, option = "inferno"),
         #colorRampPalette(c("navy", "steelblue", "white", "orange", "darkred"))(50),
         annotation_col = ann,
         annotation_colors = list(`Cell type`= c(Mesenchymal = "blue", Perivascular = "yellow")),
         #egend_breaks = c(-2.5,0,2.5),
         legend_labels = c("Min", "Avg", "Max")) %>% ggplotify::as.ggplot()
dev.off()
ggsave("Figuras/Enriquecimento/Heatmap_expr_angiogenesis.png", width = 6, height = 5)
ridgeplot(cp_gsea_c3)
```


### Gene ontology
```{r}
res.up <- res_gse62 %>% filter(logFC >= 2 & adj.P.Val <=0.05)
res.down <- res_gse62 %>% filter(logFC <= -2 & adj.P.Val <=0.05)
write.xlsx(res.down, "Resultados_down.xlsx")
write.xlsx(res.up, "Resultados_up.xlsx")

#Down-regulated genes
GO_down <- enrichGO(res.down$SYMBOL, OrgDb = "org.Hs.eg.db", keyType = "SYMBOL",
                       ont="ALL",
                       pvalueCutoff = 0.05,
                       qvalueCutoff = 0.05)

down_go_res <- GO_down@result
write.xlsx(down_go_res, "Resultados GO genes DOWN.xlsx")


#Up-regulated genes
GO_up <- enrichGO(res.up$SYMBOL, OrgDb = "org.Hs.eg.db", keyType = "SYMBOL",
                       ont="ALL",
                       pvalueCutoff = 0.05,
                       qvalueCutoff = 0.05)

up_go_res <- GO_up@result
write.xlsx(up_go_res, "Resultados GO genes UP.xlsx")

```

```{r}
#Ajustar os nomes de colunas para ficarem exatamente como o pacote necessita
down_go_res <- down_go_res %>% rename("category" = "ONTOLOGY", "term" = "Description", "genes" = "geneID", "adj_pval" = "p.adjust")
down_go_res$genes <- gsub("/", ", ", down_go_res$genes)
res.down_goplot <- res.down %>% rename("ID" = "SYMBOL")

circ_down <- circle_dat(down_go_res, res.down_goplot)
GOBar(circ)
red_circ_down <- reduce_overlap(circ_down, overlap = 0.75)

pdf("Figuras/Enriquecimento/GO/Bubbleplot_down.pdf", width = 10, height = 8)
GOBubble(circ_down)
dev.off()
pdf("Figuras/Enriquecimento/GO/Treeplot_down.pdf", width = 10, height = 8)
treeplot(pairwise_termsim(GO_down))
dev.off()

pdf("Figuras/Enriquecimento/GO/Bubbleplot_up.pdf", width = 10, height = 8)
GOBubble(circ_up, labels = 3, )
dev.off()

pdf("Figuras/Enriquecimento/GO/Treeplot_up.pdf", width = 10, height = 8)
treeplot(pairwise_termsim(GO_up))
dev.off()
```

```{r}
#Ajustar os nomes de colunas para ficarem exatamente como o pacote necessita
up_go_res <- up_go_res %>% rename("category" = "ONTOLOGY", "term" = "Description", "genes" = "geneID", "adj_pval" = "p.adjust")
up_go_res$genes <- gsub("/", ", ", up_go_res$genes)
res.up_goplot <- res.up %>% rename("ID" = "SYMBOL")

circ_up <- circle_dat(up_go_res, res.up_goplot)
GOBar(circ)
GOBubble(circ_up)
```

Gene ontology sem diferenciar up e down
```{r}
GO_gse62 <- enrichGO(res_gse62_lfc$SYMBOL, OrgDb = "org.Hs.eg.db", keyType = "SYMBOL",
                       ont="ALL",
                       pvalueCutoff = 0.05,
                       qvalueCutoff = 0.05)
GO_gse62_res <- GO_gse62@result
GO_gse62_res <- GO_gse62_res %>% rename("category" = "ONTOLOGY", "term" = "Description", "genes" = "geneID", "adj_pval" = "p.adjust")
GO_gse62_res$genes <- gsub("/", ", ", GO_gse62_res$genes)
res.go_goplot <- res_gse62_lfc %>% rename("ID" = "SYMBOL")

circ_all <- circle_dat(GO_gse62_res, res.go_goplot)

pdf("Figuras/Enriquecimento/GO/Bubbleplot_all.pdf", width = 10, height = 8)
GOBubble(circ_all, labels = 10)
dev.off()

pdf("Figuras/Enriquecimento/GO/treeplot_all.pdf", width = 10, height = 8)
treeplot(pairwise_termsim(GO_gse62))
dev.off()

write.xlsx(GO_gse62_res, "GO_all.xlsx")
```


```{r}
#Sem diferenciar up e down
GO_ids <- list(c(DOWN="GO:0048762", #mesenchymal cell differentiation, DOWN 
           "GO:0045598", #regulation of fat cell differentiation, DOWN
           "GO:0045766"))#positive regulation of angiogenesis"

GO_process <- c(#Diferentiation
  #Adicionar termos de diferenciaÃ§Ã£o de tecidos (adiposo, condrocito, e termso de imunosupressao)
                "mesenchymal cell differentiation",
                "fat cell differentiation",
                "regulation of fat cell differentiation",
                "stem cell differentiation",
                "osteoblast differentiation",
                "regulation of osteoblast differentiation",
                "regulation of neuron differentiation",
                "glial cell differentiation",
                "regulation of glial cell differentiation",
                "regulation of epithelial cell differentiation",
                "positive regulation of osteoblast differentiation",
                #Angiogenesis
                "positive regulation of angiogenesis",
                "regulation of angiogenesis",
                "sprouting angiogenesis",
                "vasculogenesis")
                
GOCircle(circ_all, nsub = GO_ids[[1]],
         table.legend = TRUE)

pdf("Figuras/Enriquecimento/GO/Circplot_all.pdf", width = 10, height = 6)
GOCircle(circ_all, nsub = GO_process[1:11],
         table.legend = TRUE)
dev.off()
pdf("Figuras/Enriquecimento/GO/Circplot_all_2.pdf", width = 10, height = 6)
GOCircle(circ_all, nsub = GO_process[12:15],
         table.legend = TRUE)
dev.off()

#Diferenciando Up de Down
GO_process_down <- list(c(
  Differentiation = "osteoblast differentiation",
  "mesenchymal cell differentiation",
  "chondrocyte differentiation",
  "regulation of fat cell differentiation",
  "negative regulation of fat cell differentiation",
  "mesodermal cell differentiation"),
  c(Angiogenesis = "regulation of angiogenesis",
  "negative regulation of angiogenesis",
  "regulation of vasculature development"))
pdf("Figuras/Enriquecimento/GO/Circplot_down.pdf", width = 10, height = 6)
GOCircle(circ_down, nsub = GO_process_down[[1]],
         table.legend = TRUE)
dev.off()
pdf("Figuras/Enriquecimento/GO/Circplot_down_2.pdf", width = 10, height = 6)
GOCircle(circ_down, nsub = GO_process_down[[2]],
         table.legend = TRUE)
dev.off()

GO_process_up <- list(c(
  Differentiation = "mesenchymal cell differentiation",
  "endothelial cell differentiation",
  "stem cell differentiation",
  "lymphocyte differentiation"))

pdf("Figuras/Enriquecimento/GO/Circplot_up.pdf", width = 8, height = 4)
GOCircle(circ_up, nsub = GO_process_up[[1]],
         table.legend = TRUE)
dev.off()
```


```{r}
#Cria-se um novo DF com apenas as colunas de Genes e logFC pq no circ padrao os genes se repetem em diferentes linhas
circ_all_logfc <- dplyr::select(circ_all, genes, logFC)
circ_all_logfc <- unique(circ_all_logfc) #aqui mantemos apenas uma vez cada gene



#Chord plot DIFFERENTIATION
chord_diff <- chord_dat(data=circ_all, process=GO_process[1:11]) #explicitar data e process para dar certo

#Novo DF de matriz binaria do circ_dat, mas como DF para mover nomes de genes para columas e dar join()
chord_fc_diff <- chord_diff %>% as.data.frame() %>% 
  rownames_to_column(var="genes")

chord_fc_diff <- left_join(chord_fc_diff, circ_all_logfc_diff, by="genes") %>% 
  column_to_rownames(., var="genes") %>% 
  as.matrix()

GOChord(chord_fc_diff, limit = c(2,0))
GOHeat(chord_diff, nlfc = 0)


#Chord plot ANGIOGENESIS
chord_ang <- chord_dat(data=circ_all, process=GO_process[12:15]) #explicitar data e process para dar certo

#Novo DF de matriz binaria do circ_dat, mas como DF para mover nomes de genes para columas e dar join()
chord_fc_ang <- chord_ang %>% as.data.frame() %>% 
  rownames_to_column(var="genes")

chord_fc_ang <- left_join(chord_fc_ang, circ_all_logfc, by="genes") %>% 
  column_to_rownames(., var="genes") %>% 
  as.matrix()

GOChord(chord_fc_ang)
GOHeat(chord_ang)
```

###KEGG
```{r}
KEGG <- enrichKEGG(res_gse62_lfc$ENTREZID, organism = "hsa", keyType = "kegg")
KEGG_res <- KEGG@result
KEGG_res %>% filter(p.adjust < 0.05) %>% write.xlsx(., "Resultados Kegg.xlsx")

KEGG.down <- enrichKEGG(res.down$ENTREZID, organism = "hsa", keyType = "kegg")
KEGG.down_res <- KEGG.down@result


KEGG.up <- enrichKEGG(res.up$ENTREZID, organism = "hsa", keyType = "kegg")
KEGG.up_res <- KEGG.up@result
```


### UpSet plot
```{r}
#Lista de genes
msc.diff <- GO_gse62_res %>% filter(term == "mesenchymal cell differentiation") %>% select(genes) %>% 
  mutate(genes=as.list(strsplit(genes, ",")))

fatc.diff <- GO_gse62_res %>% filter(term == "fat cell differentiation") %>% select(genes) %>% 
  mutate(genes=as.list(strsplit(genes, ",")))

reg.fatc.diff <- GO_gse62_res %>% filter(term == "regulation of fat cell differentiation") %>% select(genes) %>% 
  mutate(genes=as.list(strsplit(genes, ",")))

stemc.diff <- GO_gse62_res %>% filter(term == "stem cell differentiation") %>% select(genes) %>% 
  mutate(genes=as.list(strsplit(genes, ",")))

ostb.diff <- GO_gse62_res %>% filter(term == "osteoblast differentiation") %>% select(genes) %>% 
  mutate(genes=as.list(strsplit(genes, ",")))

reg.ostb.diff <- GO_gse62_res %>% filter(term == "regulation of osteoblast differentiation") %>% select(genes) %>% 
  mutate(genes=as.list(strsplit(genes, ",")))

pos.reg.ostb.diff <- GO_gse62_res %>% filter(term == "positive regulation of osteoblast differentiation") %>% select(genes) %>% 
  mutate(genes=as.list(strsplit(genes, ",")))

reg.neuron.diff <- GO_gse62_res %>% filter(term == "regulation of neuron differentiation") %>% select(genes) %>% 
  mutate(genes=as.list(strsplit(genes, ",")))

glial.diff <- GO_gse62_res %>% filter(term == "glial cell differentiation") %>% select(genes) %>% 
  mutate(genes=as.list(strsplit(genes, ",")))

reg.glial.diff <- GO_gse62_res %>% filter(term == "regulation of glial cell differentiation") %>% select(genes) %>% 
  mutate(genes=as.list(strsplit(genes, ",")))

pos.reg.ang <- GO_gse62_res %>% filter(term == "positive regulation of angiogenesis") %>% select(genes) %>% 
  mutate(genes=as.list(strsplit(genes, ",")))

reg.ang <- GO_gse62_res %>% filter(term == "regulation of angiogenesis") %>% select(genes) %>% 
  mutate(genes=as.list(strsplit(genes, ",")))

spr.ang <- GO_gse62_res %>% filter(term == "sprouting angiogenesis") %>% select(genes) %>% 
  mutate(genes=as.list(strsplit(genes, ",")))

vasc <- GO_gse62_res %>% filter(term == "vasculogenesis") %>% select(genes) %>% 
  mutate(genes=as.list(strsplit(genes, ",")))


list_genes <- c(`Mesenchymal cell diff.` = msc.diff[[1]],
                   `Fat cell diff.` = fatc.diff[[1]],
                   `Reg. of fat cell diff.` = reg.fatc.diff[[1]],
                   `Stem cell diff.` = stemc.diff[[1]],
                   `Osteoblast diff.` = ostb.diff[[1]],
                   `Reg. of osteoblast diff.` = reg.ostb.diff[[1]], 
                `Pos. reg. of osteoblast diff.` = pos.reg.ostb.diff[[1]],
                `Reg. of neuron diff.` = reg.neuron.diff[[1]],
                `Glial cell diff.` = glial.diff[[1]],
                `Reg. of glial cell diff.` = reg.glial.diff[[1]],
                `Positive reg. of angiogenesis` = pos.reg.ang[[1]],
                `Reg. of angiogenesis` = reg.ang[[1]],
                `Sprouting angiogenesis` = spr.ang[[1]],
                `Vasculogenesis` = vasc[[1]])


upset(fromList(list_genes), order.by = "freq", mb.ratio = c(0.6,0.4), text.scale = 1.2, cutoff = 2,  nsets=15, sets.bar.color = c("grey23", "darkred", "grey23", "grey23", "grey23", "grey23", "darkred", "grey23", "grey23", "darkred", "grey23", "grey23", "grey23", "darkred"))
```



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

#WGCNA
```{r}
library(WGCNA)
allowWGCNAThreads()
enableWGCNAThreads()

input_mat <- t(exp_gse62_final)
```

##Soft power
```{r}
# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to = 20, by = 2))

# Call the network topology analysis function
sft = pickSoftThreshold(
  input_mat,             # <= Input data
  #blockSize = 30,
  powerVector = powers,
  verbose = 5
  )

#--- plot

par(mfrow = c(1,2));
cex1 = 0.8;

plot(sft$fitIndices[, 1],
     -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
     xlab = "Soft Threshold (power)",
     ylab = "Scale Free Topology Model Fit, signed R^2",
     main = paste("Scale independence")
)
text(sft$fitIndices[, 1],
     -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
     labels = powers, cex = cex1, col = "red"
)
abline(h = 0.90, col = "red")
plot(sft$fitIndices[, 1],
     sft$fitIndices[, 5],
     xlab = "Soft Threshold (power)",
     ylab = "Mean Connectivity",
     type = "n",
     main = paste("Mean connectivity")
)
text(sft$fitIndices[, 1],
     sft$fitIndices[, 5],
     labels = powers,
     cex = cex1, col = "red")
```

##Network
```{r}
picked_power <- 7
temp_cor <- cor       
cor <- WGCNA::cor         # Force it to use WGCNA cor function (fix a namespace conflict issue)
netwk <- blockwiseModules(input_mat, nThreads = 4,               # <= input here
  
                          # == Adjacency Function ==
                          power = picked_power,                # <= power here
                          networkType = "signed",

                          # == Tree and Block Options ==
                          deepSplit = 2,
                          pamRespectsDendro = F,
                          # detectCutHeight = 0.75,
                          minModuleSize = 30,
                          maxBlockSize = 30000,

                          # == Module Adjustments ==
                          reassignThreshold = 0,
                          mergeCutHeight = 0.25,

                          # == TOM == Archive the run results in TOM file (saves time)
                          saveTOMs = T,
                          saveTOMFileBase = "ER",

                          # == Output Options
                          numericLabels = F,
                          verbose = 3)

cor <- temp_cor     # Return cor function to original namespace
```
###Plot
```{r}
plotDendroAndColors(
  netwk$dendrograms[[1]],
  cbind(netwk$unmergedColors, netwk$colors),
  c("Unmerged", "Merged"),
  dendroLabels = FALSE,
  hang = 0.03,
  addGuide = TRUE,
  guideHang = 0.05 )

```
####Trait
```{r}
module_df <- data.frame(
  gene_id = names(netwk$colors),
  colors = netwk$colors,
  colors_unmerged = netwk$unmergedColors)

table(module_df$colors)
table(module_df$colors_unmerged)
MEs0 <- moduleEigengenes(input_mat, netwk$colors)$eigengenes

# Reorder modules so similar modules are next to each other
MEs0 <- orderMEs(MEs0)
module_order = names(MEs0) %>% gsub("ME","", .)

# Add treatment names
MEs0$treatment = row.names(MEs0)

nGenes <- ncol(input_mat)
nSamples <- nrow(input_mat)

cell.type <- data.frame(pd$`cell type:ch1`, pd$geo_accession) %>% dplyr::rename(Cell = 1) %>% 
  mutate(cell.type=ifelse(cell.type$Cell == "Perivascular", 1, 0))

moduleTraitCor <- cor(MEs0, cell.type$cell.type, use="p")
moduleTraitPValue <- corPvalueStudent(moduleTraitCor, nSamples)

textMatrix <-  paste(signif(moduleTraitCor, 2), "\n(",
              signif(moduleTraitPValue, 1), ")", sep = "")

pdf("Module_trait.pdf", width =8, height =12)
labeledHeatmap(Matrix = moduleTraitCor,
               xLabels = "Cell type",
               yLabels = names(MEs0),
               ySymbols = names(MEs0),
               colorLabels = FALSE,
               colors = viridis::turbo(100, begin=.1, end=.9),
               textMatrix = textMatrix,
               setStdMargins = TRUE,
               cex.text = 0.7,
               zlim = c(-1,1),
               main = paste("Module-disease state relationships"))
dev.off()
#Blue e yellow correlaÃ§Ã£o positiva, Turquoise correlaÃ§Ã£o negativa
significant.modules <- c("blue", "yellow", "turquoise")
```
####Significant modules
```{r}
module_df <- left_join(module_df, anno_gse62, by=c("gene_id" = "PROBEID"))
sig.blue <- filter(module_df, colors %in% significant.modules[1])
sig.yellow <- filter(module_df, colors %in% significant.modules[2])
sig.turq <- filter(module_df, colors %in% significant.modules[3])

```

#GS MS
```{r}
#Gene Significance and Module Membership
modNames <- substring(names(MEs0), 3)

geneModuleMembership <- as.data.frame(cor(input_mat, MEs0, use="p"))
MMPvalue <- as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples))

names(geneModuleMembership) = paste("MM", modNames, sep="")
names(MMPvalue) = paste("p.MM", modNames, sep="")

geneTraitSignificance <- as.data.frame(cor(input_mat, cell.type$cell.type, use="p"))
GPSvalue <- as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples))

verboseScatterplot(abs(geneModuleMembership[sig.blue$gene_id, "MMblue"]),
                   abs(geneTraitSignificance[sig.blue$gene_id, 1]),
                   xlab = paste("Module Membership in module", "blue"),
                   ylab = "Gene significance for cell = pericyte",
                   main = paste("Module membership vs. gene significance\n"),
                   cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = "blue")

verboseScatterplot(abs(geneModuleMembership[sig.blue$gene_id, "MMyellow"]),
                   abs(geneTraitSignificance[sig.blue$gene_id, 1]),
                   xlab = paste("Module Membership in module", "yellow"),
                   ylab = "Gene significance for cell = pericyte",
                   main = paste("Module membership vs. gene significance\n"),
                   cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = "yellow")

verboseScatterplot(abs(geneModuleMembership[sig.blue$gene_id, "MMturquoise"]),
                   abs(geneTraitSignificance[sig.blue$gene_id, 1]),
                   xlab = paste("Module Membership in module", "turquoise"),
                   ylab = "Gene significance for cell = pericyte",
                   main = paste("Module membership vs. gene significance\n"),
                   cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = "turquoise")
```

####Enriquecimentos
#####KEGG
```{r}
KEGG.blue <- enrichKEGG(sig.blue$ENTREZID, organism = "hsa", keyType = "kegg")
KEGG.blue_res <- KEGG.blue@result

KEGG.yellow <- enrichKEGG(sig.yellow$ENTREZID, organism = "hsa", keyType = "kegg")
KEGG.yellow_res <- KEGG.yellow@result

KEGG.turq <- enrichKEGG(sig.turq$ENTREZID, organism = "hsa", keyType = "kegg")
KEGG.turq_res <- KEGG.turq@result
```

#####GSEA
```{r}
blueMM <- geneModuleMembership %>% select(MMblue) %>% rownames_to_column(var="gene_id")
sig.blue <- left_join(sig.blue, blueMM)
sig.blue <- sig.blue[order(sig.blue$MMblue, decreasing = TRUE),] %>% na.omit()
ranks.blue <- sig.blue$MMblue
names(ranks.blue) <- sig.blue$SYMBOL
gsea.blue <- clusterProfiler::GSEA(ranks.blue, TERM2GENE = H.symbol, scoreType="pos")
gsea.blue_res <- gsea.blue@result


yellowMM <- geneModuleMembership %>% select(MMyellow) %>% rownames_to_column(var="gene_id")
sig.yellow <- left_join(sig.yellow, yellowMM)
sig.yellow <- sig.yellow[order(sig.yellow$MMyellow, decreasing = TRUE),] %>% na.omit()
ranks.yellow <- sig.yellow$MMyellow
names(ranks.yellow) <- sig.yellow$SYMBOL
gsea.yellow <- clusterProfiler::GSEA(ranks.yellow, TERM2GENE = H.symbol)
gsea.yellow_res <- gsea.yellow@result

turqMM <- geneModuleMembership %>% select(MMturquoise) %>% rownames_to_column(var="gene_id")
sig.turq <- left_join(sig.turq, turqMM)
sig.turq <- sig.turq[order(sig.turq$MMturquoise, decreasing = TRUE),] %>% na.omit()
ranks.turq <- sig.turq$MMturq
names(ranks.turq) <- sig.turq$SYMBOL
gsea.turq <- clusterProfiler::GSEA(ranks.turq, TERM2GENE = H.symbol)
gsea.turq_res <- gsea.turq@result




```

